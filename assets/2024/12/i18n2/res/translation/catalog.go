// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package translation

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"de_DE": &dictionary{index: de_DEIndex, data: de_DEData},
		"en_US": &dictionary{index: en_USIndex, data: en_USData},
		"hr_HR": &dictionary{index: hr_HRIndex, data: hr_HRData},
	}
	fallback := language.MustParse("en-US")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{}

var de_DEIndex = []uint32{ // 1 elements
	0x00000000,
} // Size: 28 bytes

const de_DEData string = ""

var en_USIndex = []uint32{ // 1 elements
	0x00000000,
} // Size: 28 bytes

const en_USData string = ""

var hr_HRIndex = []uint32{ // 1 elements
	0x00000000,
} // Size: 28 bytes

const hr_HRData string = ""

// Total table size 84 bytes (0KiB); checksum: 1C6FFAD9
